#!/bin/bash

# Copyright (C) 2021-2025 Ilias Koukovinis <ilias.koukovinis@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

echo -e "\033[0m" # Clear any styling present from preinst

# Debut and configure Nginx to automatically initialize on system startup
sudo systemctl enable --now nginx

# Create user 'ermis' (skip if already exists)
read -r -p "Create dedicated dedicated user 'ermis'? [y/N]
(Recommended for production environments.  
If you're testing or planning to modify code, choose 'No'): " shouldCreateLinuxUser

if [[ "$shouldCreateLinuxUser" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    if ! grep -q 'ermis' /etc/passwd; then
        echo -e "\033[1mCreating ermis user\033[0m"

        # Create 'ermis' user
        sudo adduser --no-create-home ermis

        echo -e "\033[1mSuccessfully created ermis user\033[0m"
    else
        echo -e "\033[1m'ermis' user detected; skipping user creation process.\033[0m"
    fi

    # Add 'ermis' to www-data group and delegate write (essential for service operation)
    sudo usermod -aG www-data ermis
    sudo chmod -R g+w /etc/nginx
    sudo chmod -R g+r /etc/nginx

    # Ensure vital folder for database function exists
    mkdir /var/lib/ermis-server

    # Grant ownership to 'ermis'
    sudo chown -R ermis:ermis /var/ermis-server
    sudo chown -R ermis:ermis /var/lib/ermis-server
    sudo chown -R ermis:ermis /opt/ermis-server
    sudo chown -R ermis:ermis /etc/nginx/

    sudo chmod -R 777 /var/ermis-server/
    sudo chmod -R 700 /var/lib/ermis-server
    sudo chmod -R 700 /opt/ermis-server
fi


# Create database (skip if already exists)
DATABASE_NAME="ermis_database"
DATABASE_ALREADY_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DATABASE_NAME'")

if [ "$DATABASE_ALREADY_EXISTS" = "1" ]; then
    echo -e "\033[1m$DATABASE_NAME already exists; skipping process.\033[0m"
else
    read -r -p "Would you like to create database? [y/N] " response
    response=${response,,}    # tolower
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        echo -e "\033[1mCreating database\033[0m"

        sudo -u postgres psql -c "CREATE DATABASE ${DATABASE_NAME};"

        echo -e "\033[1mSuccessfully created $DATABASE_NAME\033[0m"

    fi
fi

# Create database admin (skip if already exists)
DATABASE_ADMIN_NAME="ermis_admin"
USER_ALREADY_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DATABASE_ADMIN_NAME'")

if [ "$USER_ALREADY_EXISTS" = "1" ]; then
    echo -e "\033[1mermis admin already exists; skipping process.\033[0m"
else
    read -r -p "Would you like to create database user? [y/N] " response
    response=${response,,}    # tolower
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        echo -e "\033[1mCreating ermis admin\033[0m"
        # Prompt for password securely
        read -p "Enter password for new PostgreSQL user '$DATABASE_ADMIN_NAME': " DB_PASS
        echo

        sudo -u postgres psql <<EOF
        -- Create user
        DO \$\$
        BEGIN
           IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '$DATABASE_ADMIN_NAME') THEN
              CREATE USER $DATABASE_ADMIN_NAME WITH PASSWORD '$DB_PASS';
           END IF;
        END
        \$\$;

        -- Grant privileges and setup schema
        GRANT ALL PRIVILEGES ON DATABASE $DATABASE_NAME to $DATABASE_ADMIN_NAME;
        CREATE SCHEMA public;
        GRANT ALL ON SCHEMA public TO $DATABASE_ADMIN_NAME;
        \c $DATABASE_NAME;
        SET search_path TO public;
        ALTER ROLE $DATABASE_ADMIN_NAME SET search_path TO public;
        ALTER SCHEMA public OWNER TO $DATABASE_ADMIN_NAME;
EOF

       echo -e "\033[1mSuccessfully created $DATABASE_NAME\033[0m"
    fi
fi


echo

echo -e "\033[1mYou can find thorough instructions on configuring the server in the README FILE at /opt/ermis-server/. In addition, you can visit the Ermis Wiki directly here: https://github.com/Koukobin/Ermis/wiki/.\033[0m"
echo -e "\033[1;31;4mKeep in mind that ermis-server by itself doesn't prevent DDoS attacks; I recommend using something like IPTables to configure the IP packet filter rules of the Linux kernel firewall in conjunction with Fail2ban which automatically blocks IP addresses exhibiting suspicious patterns of behaviour. Alternatively, you could use a VPN such as Tailscale.\033[0m"
echo -e "\033[1mFor better monitoring and performance tracking, consider integrating a monitoring toolkit - like Prometheus (the monitoring system; not the one from Greek mythology) - to gather metrics from the server, such as resource usage, latency, and response times.\033[0m"

